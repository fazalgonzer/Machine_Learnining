{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "188b3c39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "from sklearn.linear_model import LinearRegression,LassoCV,Ridge,Lasso\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "05db1034",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('datasets/laptop_data_cleaned.csv')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fda35033",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Ram', 'Weight', 'Price', 'TouchScreen', 'Ips', 'Ppi', 'HDD', 'SSD'], dtype='object')\n",
      "['Company', 'TypeName', 'Cpu_brand', 'Gpu_brand', 'Os']\n"
     ]
    }
   ],
   "source": [
    "#Today I found a very simple loop to separate categorical and numerical columns:\n",
    "cat=[]\n",
    "col=df.columns\n",
    "numeric=df.select_dtypes('number').columns\n",
    "print(numeric)\n",
    "for i in col:\n",
    "     if i in numeric:\n",
    "        continue\n",
    "     else:\n",
    "         cat.append(i)\n",
    "print(cat)\n",
    "#This is the starting may look dumb in future but this is the first logic that I made myself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "17528ffa",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=pd.get_dummies(df['Company'])\n",
    "df=pd.concat((df,v), axis=1,\n",
    "    join='outer')\n",
    "df=df.drop('Company',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4b1aee7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=pd.get_dummies(df['TypeName'])\n",
    "df=pd.concat((df,v), axis=1,\n",
    "    join='outer')\n",
    "df=df.drop('TypeName',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "db89b481",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=pd.get_dummies(df['Cpu_brand'])\n",
    "df=pd.concat((df,v), axis=1,\n",
    "    join='outer')\n",
    "df=df.drop('Cpu_brand',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "005d684b",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=pd.get_dummies(df['Gpu_brand'])\n",
    "df=pd.concat((df,v), axis=1,\n",
    "    join='outer')\n",
    "df=df.drop('Gpu_brand',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "fd1dd8fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "v=pd.get_dummies(df['Os'])\n",
    "df=pd.concat((df,v), axis=1,\n",
    "    join='outer')\n",
    "df=df.drop('Os',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "54ea6e77",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df['Price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "99ec98d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df.drop('Price',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4d021fe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2a3b1817",
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c01b49a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "aea33b28",
   "metadata": {},
   "outputs": [],
   "source": [
    "s=StandardScaler()\n",
    "xtrain=s.fit_transform(xtrain)\n",
    "xtest=s.transform(xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "98d5bdcc",
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_regression = LinearRegression()\n",
    "linear_scores = cross_val_score(linear_regression, xtrain, ytrain, cv=5, scoring='neg_mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4ddb92e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Lasso(), param_grid={'alpha': [0.1, 1, 10]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso = Lasso()\n",
    "parameters = {'alpha': [0.1, 1, 10]}\n",
    "lasso_grid = GridSearchCV(lasso, parameters, cv=5, scoring='neg_mean_squared_error')\n",
    "lasso_grid.fit(xtrain, ytrain)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "77e95ed3",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_alpha = lasso_grid.best_params_['alpha']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "2ef1cc95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.1267165025404274"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso_grid.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "c1138580",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=lasso_grid.predict(xtest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "f9b5f580",
   "metadata": {},
   "outputs": [],
   "source": [
    "rscore=r2_score(ytest,ypred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "74faf4be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6799927720224902\n"
     ]
    }
   ],
   "source": [
    "print(rscore)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "122484cc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fazal",
   "language": "python",
   "name": "fazal"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
